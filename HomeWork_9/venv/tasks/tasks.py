# Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает словарь,
# в котором каждый элемент списка является и ключом и значением.
# Предполагается, что элементы списка будут соответствовать правилам задания ключей в словарях.

def to_dict(lst):
    return {element: element for element in lst}


my_list = ['black', (4, 11), 11.5, -48]
print(to_dict(my_list))

# -------------------------------------------------

# Иван решил создать самый большой словарь в мире.
# Для этого он придумал функцию biggest_dict(**kwargs),
# которая принимает неограниченное количество параметров «ключ: значение»
# и обновляет созданный им словарь my_dict,
# состоящий всего из одного элемента «first_one» со значением «we can do it».
# Воссоздайте эту функцию.

my_dict = {'first_one': 'we can do it'}


def biggest_dict(**kwargs):
    my_dict.update(**kwargs)
    return my_dict


print(biggest_dict(Имя='Игорь', возраст='32', вес='82', город='Ростов'))


# -------------------------------------------------
# Дана строка в виде случайной последовательности чисел от 0 до 9.
# Требуется создать словарь, который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int),
# а в качестве значений – количество этих чисел в имеющейся последовательности.
# Для построения словаря создайте функцию count_it(sequence), принимающую строку из цифр.
# Функция должна возвратить словарь из 3-х самых часто встречаемых чисел.


def count_it(sequence):
    # При помощи генератора создаем словарь, где ключом выступает уникальный элемент строки,
    # а значением - его частота (вычисляется методом count())
    num_frequency = {int(item): sequence.count(item) for item in sequence}

    # Сортируем словарь по значениям в порядке возрастания.
    # Для этого методом items() формируем пары “(ключ, значение)” в виде кортежей по всем элементам словаря.
    # Т. к. нужно сортировать по значениям, берем второй элемент кортежей.
    # В результате получим список из кортежей “(ключ, значение)”
    sorted_num_frequency = sorted(num_frequency.items(), key=lambda element: element[1])

    # Возвращаем последние 3 элемента списка,
    # т. е. кортежи с самыми большими значениями второй компоненты, которые преобразовываем в словарь
    return dict(sorted_num_frequency[-3:])


print(count_it('1111111111222'))
print(count_it('123456789012133288776655353535353441111'))
print(count_it('007767757744331166554444'))
print()

# ----------------- другой способ ------------------

from collections import Counter


def count_it(sequence):
    return dict(Counter([int(num) for num in sequence]).most_common(3))


print(count_it('1111111111222'))
print(count_it('123456789012133288776655353535353441111'))
print(count_it('007767757744331166554444'))
